{"ast":null,"code":"var _jsxFileName = \"/Users/connorcourtney/Lets-Get-Fit-Frontend/src/pages/NutritionLog.js\",\n    _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport env from 'react-dotenv';\nimport React, { useState, useEffect } from 'react';\nimport PieChart from '../components/PieChart';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function NutritionLog(props) {\n  _s();\n\n  const [date, setDate] = useState('');\n  const [protein, setProtein] = useState('0');\n  const [carbs, setCarbs] = useState('0');\n  const [fats, setFats] = useState('0');\n\n  const initializeToday = () => {\n    let today = new Date();\n    let month = (today.getMonth() + 1).toString();\n\n    if (month.length < 2) {\n      month = '0' + month;\n    }\n\n    let day = today.getDate().toString();\n    let year = today.getFullYear().toString();\n    setDate(`${year}-${month}-${day}`);\n    fetchDay();\n  };\n\n  useEffect(() => {\n    initializeToday();\n  }, []);\n\n  const fetchDay = async () => {\n    try {\n      let response = await axios.post(`${env.BACKEND_URL}/nutrition`, {\n        date: date\n      }, {\n        headers: {\n          Authorization: props.user.userId\n        }\n      });\n\n      if (response.data.nutrition) {\n        let log = response.data.nutrition;\n        setProtein(log.protien);\n        setCarbs(log.carbs);\n        setFats(log.fat);\n      } else {\n        setProtein(0);\n        setCarbs(0);\n        setFats(0);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    fetchDay();\n  }, [date]);\n\n  const saveLog = async () => {\n    try {\n      let response = await axios.post(`${env.BACKEND_URL}/nutrition/save`, {\n        date: date,\n        protien: protein,\n        fat: fats,\n        carbs: carbs\n      }, {\n        headers: {\n          Authorization: props.user.userId\n        }\n      });\n      console.log(response);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dailyLogPg\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"date\",\n      type: \"date\",\n      value: date,\n      onChange: e => {\n        setDate(e.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"nutrContent\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logsChart\",\n        children: /*#__PURE__*/_jsxDEV(PieChart, {\n          protein: protein,\n          fats: fats,\n          carbs: carbs\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 20\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 16\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nutrValues\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"nutrValue\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"nutrLabel\",\n            children: \"protein: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 47\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              min: \"0\",\n              className: \"nutrInput\",\n              value: protein,\n              onChange: e => {\n                setProtein(e.target.value);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 94\n            }, this), \" grams\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 89\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 20\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"nutrValue\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"nutrLabel\",\n            children: \"carbs: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 47\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              min: \"0\",\n              className: \"nutrInput\",\n              value: carbs,\n              onChange: e => {\n                setCarbs(e.target.value);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 92\n            }, this), \" grams\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 87\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 20\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"nutrValue\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"nutrLabel\",\n            children: \"fats: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 47\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              min: \"0\",\n              className: \"nutrInput\",\n              value: fats,\n              onChange: e => {\n                setFats(e.target.value);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 91\n            }, this), \" grams\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 86\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 20\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"nutrSave\",\n          className: \"button\",\n          onClick: () => saveLog(),\n          children: \"save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 20\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 16\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 8\n  }, this);\n}\n\n_s(NutritionLog, \"j0UEh0DGROUz5MdyVwnIVbgJFSA=\");\n\n_c = NutritionLog;\n\nvar _c;\n\n$RefreshReg$(_c, \"NutritionLog\");","map":{"version":3,"sources":["/Users/connorcourtney/Lets-Get-Fit-Frontend/src/pages/NutritionLog.js"],"names":["axios","env","React","useState","useEffect","PieChart","NutritionLog","props","date","setDate","protein","setProtein","carbs","setCarbs","fats","setFats","initializeToday","today","Date","month","getMonth","toString","length","day","getDate","year","getFullYear","fetchDay","response","post","BACKEND_URL","headers","Authorization","user","userId","data","nutrition","log","protien","fat","error","console","saveLog","e","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,QAAP,MAAqB,wBAArB;;AAEA,eAAe,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAAA;;AAEzC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,GAAD,CAAtC;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,GAAD,CAAlC;AACA,QAAM,CAACW,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAC,GAAD,CAAhC;;AAGA,QAAMa,eAAe,GAAG,MAAM;AAC1B,QAAIC,KAAK,GAAG,IAAIC,IAAJ,EAAZ;AAEA,QAAIC,KAAK,GAAG,CAACF,KAAK,CAACG,QAAN,KAAiB,CAAlB,EAAqBC,QAArB,EAAZ;;AACA,QAAGF,KAAK,CAACG,MAAN,GAAe,CAAlB,EAAoB;AAChBH,MAAAA,KAAK,GAAG,MAAIA,KAAZ;AACH;;AACD,QAAII,GAAG,GAAGN,KAAK,CAACO,OAAN,GAAgBH,QAAhB,EAAV;AACA,QAAII,IAAI,GAAGR,KAAK,CAACS,WAAN,GAAoBL,QAApB,EAAX;AAEAZ,IAAAA,OAAO,CAAE,GAAEgB,IAAK,IAAGN,KAAM,IAAGI,GAAI,EAAzB,CAAP;AAEAI,IAAAA,QAAQ;AACX,GAbD;;AAcAvB,EAAAA,SAAS,CAAC,MAAM;AACZY,IAAAA,eAAe;AAClB,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMW,QAAQ,GAAG,YAAY;AACzB,QAAG;AACC,UAAIC,QAAQ,GAAG,MAAM5B,KAAK,CAAC6B,IAAN,CAAY,GAAE5B,GAAG,CAAC6B,WAAY,YAA9B,EAA0C;AAC3DtB,QAAAA,IAAI,EAAEA;AADqD,OAA1C,EAGrB;AACIuB,QAAAA,OAAO,EAAE;AACLC,UAAAA,aAAa,EAAEzB,KAAK,CAAC0B,IAAN,CAAWC;AADrB;AADb,OAHqB,CAArB;;AASA,UAAGN,QAAQ,CAACO,IAAT,CAAcC,SAAjB,EAA2B;AACvB,YAAIC,GAAG,GAAGT,QAAQ,CAACO,IAAT,CAAcC,SAAxB;AACAzB,QAAAA,UAAU,CAAC0B,GAAG,CAACC,OAAL,CAAV;AACAzB,QAAAA,QAAQ,CAACwB,GAAG,CAACzB,KAAL,CAAR;AACAG,QAAAA,OAAO,CAACsB,GAAG,CAACE,GAAL,CAAP;AACH,OALD,MAKK;AACD5B,QAAAA,UAAU,CAAC,CAAD,CAAV;AACAE,QAAAA,QAAQ,CAAC,CAAD,CAAR;AACAE,QAAAA,OAAO,CAAC,CAAD,CAAP;AACH;AAEJ,KArBD,CAqBC,OAAMyB,KAAN,EAAY;AACTC,MAAAA,OAAO,CAACJ,GAAR,CAAYG,KAAZ;AACH;AACJ,GAzBD;;AA0BApC,EAAAA,SAAS,CAAC,MAAM;AACZuB,IAAAA,QAAQ;AACX,GAFQ,EAEN,CAACnB,IAAD,CAFM,CAAT;;AAIA,QAAMkC,OAAO,GAAG,YAAY;AACxB,QAAG;AACC,UAAId,QAAQ,GAAG,MAAM5B,KAAK,CAAC6B,IAAN,CAAY,GAAE5B,GAAG,CAAC6B,WAAY,iBAA9B,EAA+C;AAChEtB,QAAAA,IAAI,EAAEA,IAD0D;AAEhE8B,QAAAA,OAAO,EAAE5B,OAFuD;AAGhE6B,QAAAA,GAAG,EAAEzB,IAH2D;AAIhEF,QAAAA,KAAK,EAAEA;AAJyD,OAA/C,EAMrB;AACImB,QAAAA,OAAO,EAAE;AACLC,UAAAA,aAAa,EAAEzB,KAAK,CAAC0B,IAAN,CAAWC;AADrB;AADb,OANqB,CAArB;AAYAO,MAAAA,OAAO,CAACJ,GAAR,CAAYT,QAAZ;AAEH,KAfD,CAeC,OAAMY,KAAN,EAAY;AACTC,MAAAA,OAAO,CAACJ,GAAR,CAAYG,KAAZ;AACH;AACJ,GAnBD;;AAqBA,sBACI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA,4BACG;AAAO,MAAA,SAAS,EAAC,MAAjB;AAAwB,MAAA,IAAI,EAAC,MAA7B;AAAoC,MAAA,KAAK,EAAEhC,IAA3C;AAAiD,MAAA,QAAQ,EAAGmC,CAAD,IAAO;AAAClC,QAAAA,OAAO,CAACkC,CAAC,CAACC,MAAF,CAASC,KAAV,CAAP;AAAwB;AAA3F;AAAA;AAAA;AAAA;AAAA,YADH,eAEG;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,8BAIK;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,+BACI,QAAC,QAAD;AAAU,UAAA,OAAO,EAAEnC,OAAnB;AAA4B,UAAA,IAAI,EAAEI,IAAlC;AAAwC,UAAA,KAAK,EAAEF;AAA/C;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAJL,eAOK;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA,gCACI;AAAK,UAAA,SAAS,EAAC,WAAf;AAAA,kCAA2B;AAAK,YAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAA3B,eAAqE;AAAA,oCAAK;AAAO,cAAA,IAAI,EAAC,QAAZ;AAAqB,cAAA,GAAG,EAAC,GAAzB;AAA6B,cAAA,SAAS,EAAC,WAAvC;AAAmD,cAAA,KAAK,EAAEF,OAA1D;AAAmE,cAAA,QAAQ,EAAGiC,CAAD,IAAK;AAAChC,gBAAAA,UAAU,CAACgC,CAAC,CAACC,MAAF,CAASC,KAAV,CAAV;AAA2B;AAA9G;AAAA;AAAA;AAAA;AAAA,oBAAL;AAAA;AAAA;AAAA;AAAA;AAAA,kBAArE;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAK,UAAA,SAAS,EAAC,WAAf;AAAA,kCAA2B;AAAK,YAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAA3B,eAAmE;AAAA,oCAAK;AAAO,cAAA,IAAI,EAAC,QAAZ;AAAqB,cAAA,GAAG,EAAC,GAAzB;AAA6B,cAAA,SAAS,EAAC,WAAvC;AAAmD,cAAA,KAAK,EAAEjC,KAA1D;AAAiE,cAAA,QAAQ,EAAG+B,CAAD,IAAK;AAAC9B,gBAAAA,QAAQ,CAAC8B,CAAC,CAACC,MAAF,CAASC,KAAV,CAAR;AAAyB;AAA1G;AAAA;AAAA;AAAA;AAAA,oBAAL;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAnE;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI;AAAK,UAAA,SAAS,EAAC,WAAf;AAAA,kCAA2B;AAAK,YAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAA3B,eAAkE;AAAA,oCAAK;AAAO,cAAA,IAAI,EAAC,QAAZ;AAAqB,cAAA,GAAG,EAAC,GAAzB;AAA6B,cAAA,SAAS,EAAC,WAAvC;AAAmD,cAAA,KAAK,EAAE/B,IAA1D;AAAgE,cAAA,QAAQ,EAAG6B,CAAD,IAAK;AAAC5B,gBAAAA,OAAO,CAAC4B,CAAC,CAACC,MAAF,CAASC,KAAV,CAAP;AAAwB;AAAxG;AAAA;AAAA;AAAA;AAAA,oBAAL;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAlE;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ,eAII;AAAK,UAAA,EAAE,EAAC,UAAR;AAAmB,UAAA,SAAS,EAAC,QAA7B;AAAsC,UAAA,OAAO,EAAE,MAAMH,OAAO,EAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAPL;AAAA;AAAA;AAAA;AAAA;AAAA,YAFH;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAmBF;;GAhGuBpC,Y;;KAAAA,Y","sourcesContent":["import axios from 'axios'\nimport env from 'react-dotenv'\nimport React, {useState, useEffect} from 'react'\nimport PieChart from '../components/PieChart'\n \nexport default function NutritionLog(props) {\n \n   const [date, setDate] = useState('')\n   const [protein, setProtein] = useState('0')\n   const [carbs, setCarbs] = useState('0')\n   const [fats, setFats] = useState('0')\n \n \n   const initializeToday = () => {\n       let today = new Date()\n \n       let month = (today.getMonth()+1).toString()\n       if(month.length < 2){\n           month = '0'+month\n       }\n       let day = today.getDate().toString()\n       let year = today.getFullYear().toString()\n \n       setDate(`${year}-${month}-${day}`)\n \n       fetchDay()\n   }\n   useEffect(() => {\n       initializeToday()\n   }, [])\n \n   const fetchDay = async () => {\n       try{\n           let response = await axios.post(`${env.BACKEND_URL}/nutrition`,{\n               date: date\n           },\n           {\n               headers: {\n                   Authorization: props.user.userId\n               }\n           })\n \n           if(response.data.nutrition){\n               let log = response.data.nutrition\n               setProtein(log.protien)\n               setCarbs(log.carbs)\n               setFats(log.fat)\n           }else{\n               setProtein(0)\n               setCarbs(0)\n               setFats(0)\n           }\n \n       }catch(error){\n           console.log(error)\n       }\n   }\n   useEffect(() => {\n       fetchDay()\n   }, [date])\n \n   const saveLog = async () => {\n       try{\n           let response = await axios.post(`${env.BACKEND_URL}/nutrition/save`,{\n               date: date,\n               protien: protein,\n               fat: fats,\n               carbs: carbs\n           },\n           {\n               headers: {\n                   Authorization: props.user.userId\n               }\n           })\n \n           console.log(response)\n      \n       }catch(error){\n           console.log(error)\n       }\n   }\n \n   return (\n       <div className='dailyLogPg'>\n          <input className='date' type=\"date\" value={date} onChange={(e) => {setDate(e.target.value)}}></input>\n          <div className='nutrContent'>\n               {/* <div className='recChart'>\n                   <PieChart protein={30} fats={30} carbs={40}/>\n               </div> */}\n               <div className='logsChart'>\n                   <PieChart protein={protein} fats={fats} carbs={carbs}/>\n               </div>\n               <div className='nutrValues'>\n                   <div className='nutrValue'><div className='nutrLabel'>protein: </div><div><input type='number' min='0' className='nutrInput' value={protein} onChange={(e)=>{setProtein(e.target.value)}}/> grams</div></div>\n                   <div className='nutrValue'><div className='nutrLabel'>carbs: </div><div><input type='number' min='0' className='nutrInput' value={carbs} onChange={(e)=>{setCarbs(e.target.value)}}/> grams</div></div>\n                   <div className='nutrValue'><div className='nutrLabel'>fats: </div><div><input type='number' min='0' className='nutrInput' value={fats} onChange={(e)=>{setFats(e.target.value)}}/> grams</div></div>\n                   <div id='nutrSave' className='button' onClick={() => saveLog()}>save</div>\n               </div>\n           </div>\n       </div>\n   )\n}\n \n \n"]},"metadata":{},"sourceType":"module"}